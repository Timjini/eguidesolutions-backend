<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://unpkg.com/peerjs@1.4.7/dist/peerjs.min.js" defer></script>
    <script>
        const ROOM_ID = "<%= roomId %>";
    </script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet"
            integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
    <script src="/socket.io/socket.io.js" defer></script>
    <script src="script.js" defer></script>
    <title>Document</title>
    <style>
        section {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            background-color: #242424;
            color:#f5f5f5;
        }

        #muteButton {
            background-color: transparent;
            border: none;
            outline: none;
        }

        .bi{
            color: #f5f5f5;
        }

        #visualizer {
            width: 100%;
            height: 100%;
        }
    </style>
</head>
<body>
    <section>
        <div class="p-5">
            <h1>Guide Broadcast</h1>
        </div>
        <div class="container">
            <canvas id="visualizer"></canvas>
        </div>
        <button id="muteButton">
            <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-mic-fill"
                viewBox="0 0 16 16">
                <path d="M5 3a3 3 0 0 1 6 0v5a3 3 0 0 1-6 0V3z" />
                <path
                    d="M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z" />
            </svg>
        </button>
    </section>

    <script>
          const canvas = document.getElementById('visualizer');
            const ctx = canvas.getContext('2d');

            // Set canvas size
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;

            // Create an audio context
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();

            // Create an analyser node
            const analyser = audioContext.createAnalyser();
            analyser.fftSize = 256; // Fast Fourier Transform size

            // Connect the analyser to the audio context's destination (output)
            analyser.connect(audioContext.destination);

            // Create an array to store frequency data
            const frequencyData = new Uint8Array(analyser.frequencyBinCount);

            // Create a shape
            const shape = {
                x: canvas.width / 2,
                y: canvas.height / 2,
                radius: 50,
            };

            // Start capturing audio from the user's microphone
            navigator.mediaDevices.getUserMedia({ audio: true })
                .then((stream) => {
                    const source = audioContext.createMediaStreamSource(stream);
                    source.connect(analyser);
                })
                .catch((error) => {
                    console.error('Error accessing microphone:', error);
                });

            // Main animation loop
            function animate() {
                // Update frequency data
                analyser.getByteFrequencyData(frequencyData);

                // Calculate average frequency value
                const averageFrequency = frequencyData.reduce((acc, val) => acc + val, 0) / frequencyData.length;

                // Map the average frequency to the shape's radius
                shape.radius = averageFrequency;

                // Clear canvas
                ctx.clearRect(0, 0, canvas.width, canvas.height);

                // Draw the shape
                ctx.beginPath();
                ctx.arc(shape.x, shape.y, shape.radius, 0, Math.PI * 2);
                ctx.fillStyle = 'blue';
                ctx.fill();
                ctx.closePath();

                // Request the next animation frame
                requestAnimationFrame(animate);
            }

            // Start the animation loop
            animate();
    </script>
</body>
</html>